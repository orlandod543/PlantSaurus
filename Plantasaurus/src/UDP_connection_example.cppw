/* NetworkSocketAPI Example Program
 * Copyright (c) 2015 ARM Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 //https://os.mbed.com/teams/NetworkSocketAPI/wiki/Getting-Started
#include "mbed.h"
#include "ESP8266Interface.h"
#include "UDPSocket.h"
#include "Conf.h"
ESP8266Interface esp(ESP8266_TX, ESP8266_RX); //create a wifi connection
WiFiInterface *wifi = &esp;
Serial pc(USBTX, USBRX);

int main()
{
    pc.baud(SERIALBAUD);
    pc.printf("wifi connection example\r\n");
    //connects to the network. If fails program stops. 
    pc.printf("Attempting to connect to %s:\r\n", SSIDName);
    nsapi_error_t status = wifi->connect(SSIDName, SSIDPassword, SSIDSecurity);
    if(status!=NSAPI_ERROR_OK){
        pc.printf("Connection failed with status %i. Stop", status);
        return 0;
    }
    //if everything is ok then print the ip address. 
    pc.printf("Connection successful\r\n");
    const char *ip = wifi->get_ip_address();
    const char *mac = wifi->get_mac_address();
    pc.printf("IP address is: %s\r\n", ip ? ip : "No IP");
    pc.printf("MAC address is: %s\r\n", mac ? mac : "No MAC");

    //Attempt to create a socket connection and send data. 
    UDPSocket socket;
    socket.open(wifi);

    while(true){
    // Send a simple http request
    char sbuffer[] = "GET / HTTP/1.1\r\nHost: www.arm.com\r\n\r\n";
    int scount = socket.sendto(TARDISIP, TARDISPORT,sbuffer, sizeof sbuffer);
    printf("sent %d [%.*s]\r\n", scount, strstr(sbuffer, "\r\n")-sbuffer, sbuffer);
    wait(1);
 
    // Close the socket to return its memory and bring down the network interface
    }

}